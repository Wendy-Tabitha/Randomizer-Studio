"use client";

import React, { useState, useTransition } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { generateWritingPrompt, GenerateWritingPromptInput } from "@/ai/flows/generate-writing-prompt";
import { Loader2, Wand2, Copy } from "lucide-react";

const promptFormSchema = z.object({
  genre: z.string().optional(),
  keywords: z.string().optional(),
});

type PromptFormValues = z.infer<typeof promptFormSchema>;

export function WritingPromptGenerator() {
  const [generatedPrompt, setGeneratedPrompt] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();
  const { toast } = useToast();

  const form = useForm<PromptFormValues>({
    resolver: zodResolver(promptFormSchema),
    defaultValues: {
      genre: "",
      keywords: "",
    },
  });

  const onSubmit = (data: GenerateWritingPromptInput) => {
    startTransition(async () => {
      try {
        const result = await generateWritingPrompt(data);
        if (result && result.prompt) {
          setGeneratedPrompt(result.prompt);
        } else {
          toast({
            title: "Error",
            description: "Failed to generate prompt. Please try again.",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error generating prompt:", error);
        toast({
          title: "Error",
          description: "An unexpected error occurred. Please try again.",
          variant: "destructive",
        });
      }
    });
  };

  const copyToClipboard = () => {
    if (generatedPrompt) {
      navigator.clipboard.writeText(generatedPrompt)
        .then(() => {
          toast({
            title: "Copied!",
            description: "Prompt copied to clipboard.",
          });
        })
        .catch(err => {
          toast({
            title: "Error",
            description: "Failed to copy prompt.",
            variant: "destructive",
          });
          console.error('Failed to copy: ', err);
        });
    }
  };

  return (
    <Card className="w-full max-w-lg shadow-lg">
      <CardHeader>
        <CardTitle className="font-headline text-2xl">AI Writing Prompt Generator</CardTitle>
        <CardDescription>Get a unique creative writing prompt generated by AI.</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <CardContent className="space-y-4">
            <FormField
              control={form.control}
              name="genre"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Genre (Optional)</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Sci-Fi, Fantasy, Mystery" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="keywords"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Keywords (Optional)</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., ancient artifact, hidden power, betrayal" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {generatedPrompt && (
              <div className="space-y-2 pt-4">
                <Label htmlFor="generatedPromptText">Your Creative Spark:</Label>
                <div className="relative">
                   <Textarea
                    id="generatedPromptText"
                    readOnly
                    value={generatedPrompt}
                    className="min-h-[120px] bg-muted/50 p-3 rounded-md focus-visible:ring-primary"
                    rows={5}
                  />
                  <Button 
                    type="button" 
                    variant="ghost" 
                    size="icon" 
                    onClick={copyToClipboard} 
                    className="absolute top-2 right-2 text-muted-foreground hover:text-primary"
                    aria-label="Copy prompt"
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground" disabled={isPending}>
              {isPending ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Wand2 className="mr-2 h-4 w-4" />
              )}
              {isPending ? "Generating..." : "Generate Prompt"}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}
